geom_area(aes(x = speed, color= gender),fill="white", alpha = 0.6, stat='bin', position = position_dodge())
+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
?geom_area
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
gate_results  = subset(actual_results, gate == input$gate & dist>0 & speed > 85)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_area(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat = 'bin', position = position_dodge())
+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
gate_results  = subset(actual_results, gate == input$gate & dist>0 & speed > 85)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_area(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat = 'bin', position = position_dodge())+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
gate_results  = subset(actual_results, gate == input$gate & dist>0 & speed > 85)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
gate_results  = subset(actual_results, gate == input$gate & dist>0 & speed > 85)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
print(nrow(gate_results))
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
gate_results  = subset(actual_results, gate == input$gate & dist>0 & speed > 85)
output$den <- renderPlot({
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(actual_results, gate == input$gate & dist>0 & speed > 85)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(gate_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & dist>0 & speed > 85)
N_1 = nrow(subset(gate_results), gender=='Women')
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', N_1 - nrow(gate_results))
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & dist>0 & speed > 85)
N_1 = nrow(subset(gate_results), gender=='Women')
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', N_1 - nrow(gate_results))
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & dist>0 & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', N_1 - nrow(gate_results))
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities') + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & dist>0 & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', N_1 - nrow(gate_results))
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
nrow(subset(competitions, gender=='Women'))
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & dist>0 & speed > 85)
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == 10 & dist>0 & speed > 85)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', N_1 - nrow(gate_results))
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_density(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_area(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_area(aes(x = speed, color = gender),fill="white", alpha = 0.6)++
stat_smooth(
geom = 'area', method = 'loess', span = 1/3,
alpha = 1/2, fill = "red")+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_area(aes(x = speed, color = gender),fill="white", alpha = 0.6)+
stat_smooth(
geom = 'area', method = 'loess', span = 1/3,
alpha = 1/2, fill = "red")+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6,span = 0.3, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6,span = 0.9, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat='bin',method = lm, formula = y ~ splines::bs(x, 3))+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
View(actual_results)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by=1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = input$year, labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by=1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = input$year, labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(0,input$year), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(input$year), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
cut(competition$season, breaks = c(2018), labels=c('before', 'after'))
cut(competitions$season, breaks = c(2018), labels=c('before', 'after'))
cut(competitions$season, breaks = c(0,2018), labels=c('before', 'after'))
cut(competitions$season, breaks = c(2009,2018,2021), labels=c('before', 'after'))
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
cut(c(2018,2019,2017,2020), breaks = c(2009,2018,2022), labels=c('before', 'after'))
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
