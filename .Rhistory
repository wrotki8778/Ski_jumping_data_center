server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, fill = wind), alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145) +
scale_fill_gradientn(colours = terrain.colors(6),limits=c(-2,2))
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
library(shiny)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
our_place = 'Oberstdorf'
our_hill_size = c(120,160)
obe_ids = subset(competitions, place == our_place & hill_size_x > our_hill_size[1] & hill_size_x < our_hill_size[2])
actual_results <- subset(results, results$id %in% obe_ids$id)
summary(actual_results)
summary(obe_ids)
plot(actual_results[,c(1,2,9,11,13,15)])
round(cor(actual_results[,c(1,2,9,11,13,15)],use = 'complete.obs'),2)
ggplot(subset(actual_results[,c('dist','id')], dist>0)) +
geom_density(aes(x = dist),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','id')], speed>85)) +
geom_density(aes(x = speed),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','dist')], speed>85 & dist>0)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution')
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & id %in% obe_men)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for men') + xlim(87,100) + ylim(80,140)
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & !(id %in% obe_men))) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for women') + xlim(87,100) + ylim(80,140)
ui_gate <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server_gate <- function(input, output) {
output$den <- renderPlot({
gate_results  <- reactive({
u = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
u
})
N_1 = nrow(gate_results()[gate_results()$gender == 'Women',])
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results()) - N_1)
ggplot(gate_results()) +
geom_histogram(aes(x = speed, color = gender),fill = "white", alpha = 0.6) + labs(title = N) + xlim(87.5,97.5)
})
}
shinyApp(ui_gate, server_gate)
ui_gate <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_gate <- function(input, output) {
output$den <- renderPlot({
gate_results  <- reactive({
u = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
u
})
N_1 = nrow(gate_results()[gate_results()$gender == 'Women',])
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results()) - N_1)
ggplot(gate_results()) +
geom_histogram(aes(x = speed, color = gender),fill = "white", alpha = 0.6) + labs(title = N) + xlim(87.5,97.5)
})
output$button <- onSessionEnded()
}
shinyApp(ui_gate, server_gate)
ui_gate <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_gate <- function(input, output) {
output$den <- renderPlot({
gate_results  <- reactive({
u = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
u
})
N_1 = nrow(gate_results()[gate_results()$gender == 'Women',])
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results()) - N_1)
ggplot(gate_results()) +
geom_histogram(aes(x = speed, color = gender),fill = "white", alpha = 0.6) + labs(title = N) + xlim(87.5,97.5)
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_gate, server_gate)
ui_shift <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_shift <- function(input, output) {
output$den <- renderPlot({
gate_results <- reactive({
u <- subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by = 'id'), gate == input$gate & speed > 85)
u$before = cut(as.numeric(u$season), breaks = c(2009,input$year,2022), labels = c('to', 'after'))
u
})
N = paste('Before and after: ', input$year)
ggplot(gate_results()) +
geom_histogram(aes(x = speed, color = before),fill = "white", alpha = 0.6) + labs(title = N) + xlim(87.5,97.5)
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_shift, server_shift)
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
actionButton("button", "Close app")
ui_dist <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui, server)
ui_dist <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_shift <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_shift <- function(input, output) {
output$den <- renderPlot({
gate_results <- reactive({
u <- subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by = 'id'), gate == input$gate & speed > 85)
u$before = cut(as.numeric(u$season), breaks = c(2009,input$year,2022), labels = c('to', 'after'))
u
})
N = paste('Before and after: ', input$year)
ggplot(gate_results()) +
geom_histogram(aes(x = speed, color = before),fill = "white", alpha = 0.6) + labs(title = N) + xlim(87.5,97.5)
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_shift, server_shift)
ui_dist <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den"),
actionButton("button", "Close app")
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
checkboxGroupInput('years', label = 'Select years:',
choices = seq(2010,2021,by = 1), selected = 2018),
plotOutput("den"),
actionButton("button", "Close app")
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
checkboxGroupInput('years', label = 'Select years:',
choices = seq(2010,2021,by = 1), selected = 2018),),
actionButton("button", "Close app"),
mainPanel(plotOutput("den"))
)
)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
checkboxGroupInput('years', label = 'Select years:',
choices = seq(2010,2021,by = 1), selected = 2018),),
actionButton("button", "Close app"),
mainPanel(plotOutput("den"))
)
)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
checkboxGroupInput('years', label = 'Select years:',
choices = seq(2010,2021,by = 1), selected = 2018),),
actionButton("button", "Close app"),)
mainPanel(plotOutput("den"))
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
server_dist <- function(input, output) {
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
server_dist <- function(input, output) {
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
