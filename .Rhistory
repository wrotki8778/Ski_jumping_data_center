return(output)
}
all_codes = c(all_comps_r[(all_comps_r['training']==0) & (all_comps_r['season']>2014) & (all_comps_r['team'] == 0) & (1-is.na(all_comps_r['wind.factor'])),'id'])
set.seed(2)
sample_codes = sample(all_codes,20)
test_dataset = ar_estimate(dataset,model,sample_codes[1])
for(i in 2:length(sample_codes)){
test_dataset = rbind(test_dataset,ar_estimate(dataset,model,sample_codes[i]))
}
estimates_model = lm(epsilon_t ~ ., data=test_dataset)
summary(estimates_model)
ar_estimate <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
names=c()
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
names = c(names,name)
test_dataset[name] = shift(test_dataset$epsilon_t,i)
}
output = test_dataset[,c(c('epsilon_t'),names)]
return(output)
}
all_codes = c(all_comps_r[(all_comps_r['training']==0) & (all_comps_r['season']>2014) & (all_comps_r['team'] == 0) & (1-is.na(all_comps_r['wind.factor'])),'id'])
sample_codes = sample(all_codes,50)
test_dataset = ar_estimate(dataset,model,sample_codes[1])
for(i in 2:length(sample_codes)){
test_dataset = rbind(test_dataset,ar_estimate(dataset,model,sample_codes[i]))
}
estimates_model = lm(epsilon_t ~ ., data=test_dataset)
summary(estimates_model)
ar_estimate <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
names=c()
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
names = c(names,name)
test_dataset[name] = shift(test_dataset$epsilon_t,i)
}
output = test_dataset[,c(c('epsilon_t'),names)]
return(output)
}
all_codes = c(all_comps_r[(all_comps_r['training']==0) & (all_comps_r['season']>2014) & (all_comps_r['team'] == 0) & (1-is.na(all_comps_r['wind.factor'])),'id'])
sample_codes = sample(all_codes,50)
test_dataset = ar_estimate(dataset,model,sample_codes[1])
for(i in 2:length(sample_codes)){
test_dataset = rbind(test_dataset,ar_estimate(dataset,model,sample_codes[i]))
}
estimates_model = lm(epsilon_t ~ ., data=test_dataset)
summary(estimates_model)
ar_estimate <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
names=c()
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
names = c(names,name)
test_dataset[name] = shift(test_dataset$epsilon_t,i)
}
output = test_dataset[,c(c('epsilon_t'),names)]
return(output)
}
all_codes = c(all_comps_r[(all_comps_r['training']==0) & (all_comps_r['season']>2014) & (all_comps_r['team'] == 0) & (1-is.na(all_comps_r['wind.factor'])),'id'])
set.seed(2)
sample_codes = sample(all_codes,150)
test_dataset = ar_estimate(dataset,model,sample_codes[1])
for(i in 2:length(sample_codes)){
test_dataset = rbind(test_dataset,ar_estimate(dataset,model,sample_codes[i]))
}
estimates_model = lm(epsilon_t ~ ., data=test_dataset)
summary(estimates_model)
knitr::opts_chunk$set(echo = TRUE)
all_ratings <- read.csv("../input/ski-jumping-results-database-2009now/all_ratings.csv")
knitr::opts_chunk$set(echo = TRUE)
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_comps_r['hill_type'] = cut(all_comps_r$hill_size_x,c(0,114,160,300),labels=c('normal','large','flying'))
all_results <- read.csv("all_results.csv")
all_names <- read.csv("all_names.csv")
all_names <- all_names[!duplicated(all_names[,c('codex')]),]
all_results <- all_results[all_results['speed']>50 & all_results['speed']<115,]
all_results <- all_results[all_results['dist']>40,]
dataset <- merge(all_results,all_comps_r,by=c('id'),all.y=FALSE)
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,all_ratings,by.x=c('id','codex.x','round'),by.y=c('id','codex','round'),all.y=FALSE,all.x=TRUE)
dataset$gender = as.integer(as.factor(dataset$gender))
train_dataset = dataset[(dataset['season']>2011) & (dataset['season']<2017),]
?format.data.frame
require(tidyverse)
require(knitr)
codes = c('2017JP3817RL','2019JP3192RL','2018JP3068RL')
predict_comp <- function(code, dataset, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['prediction'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['prediction'] = round(2*test_dataset['prediction'])/2
test_dataset['error'] = test_dataset['dist'] - test_dataset['prediction']
return(test_dataset[,c('name','round','cumm_rating','short_rating','dist','prediction','error')])
}
for(code in codes) print(format.data.frame(predict_comp(code,dataset,simple_model),digits=1))
knitr::opts_chunk$set(echo = TRUE)
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_comps_r['hill_type'] = cut(all_comps_r$hill_size_x,c(0,114,160,300),labels=c('normal','large','flying'))
all_results <- read.csv("all_results.csv")
all_names <- read.csv("all_names.csv")
all_names <- all_names[!duplicated(all_names[,c('codex')]),]
all_results <- all_results[all_results['speed']>50 & all_results['speed']<115,]
all_results <- all_results[all_results['dist']>40,]
dataset <- merge(all_results,all_comps_r,by=c('id'),all.y=FALSE)
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,all_ratings,by.x=c('id','codex.x','round'),by.y=c('id','codex','round'),all.y=FALSE,all.x=TRUE)
dataset$gender = as.integer(as.factor(dataset$gender))
train_dataset = dataset[(dataset['season']>2011) & (dataset['season']<2017),]
simple_model <- lm(norm_dist~(speed+wind+short_rating+cumm_rating+gender+training)*hill_type+hill_type, data=train_dataset)
summary(simple_model)
hist(train_dataset$norm_dist)
require(tidyverse)
require(knitr)
codes = c('2017JP3817RL','2019JP3192RL','2018JP3068RL')
predict_comp <- function(code, dataset, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['prediction'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['prediction'] = round(2*test_dataset['prediction'])/2
test_dataset['error'] = test_dataset['dist'] - test_dataset['prediction']
return(test_dataset[,c('name','round','cumm_rating','short_rating','dist','prediction','error')])
}
for(code in codes) print(format.data.frame(predict_comp(code,dataset,simple_model),digits=1))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['linear_prediction'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['linear_prediction'] = round(2*test_dataset['linear_prediction'])/2
test_dataset['prediction'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['prediction'] = round(2*test_dataset['prediction'])/2
test_dataset['linear_error'] = test_dataset['dist'] - test_dataset['linear_prediction']
test_dataset['error'] = test_dataset['dist'] - test_dataset['prediction']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'linear_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = prediction), color='green') + geom_jitter(aes(x = dist, y = linear_prediction), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','linear_prediction','linear_error','prediction','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed, by = hill_type)+wind+wind:hill_type+s(cumm_rating, by = hill_type)+gender + gender:hill_type+training + training:hill_type+s(short_rating, by = hill_type), data=train_dataset)
summary(model)
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['linear_prediction'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['linear_prediction'] = round(2*test_dataset['linear_prediction'])/2
test_dataset['prediction'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['prediction'] = round(2*test_dataset['prediction'])/2
test_dataset['linear_error'] = test_dataset['dist'] - test_dataset['linear_prediction']
test_dataset['error'] = test_dataset['dist'] - test_dataset['prediction']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'linear_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = prediction), color='green') + geom_jitter(aes(x = dist, y = linear_prediction), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','linear_prediction','linear_error','prediction','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['linear_prediction'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['linear_prediction'] = round(2*test_dataset['linear_prediction'])/2
test_dataset['prediction'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['prediction'] = round(2*test_dataset['prediction'])/2
test_dataset['linear_error'] = test_dataset['dist'] - test_dataset['linear_prediction']
test_dataset['error'] = test_dataset['dist'] - test_dataset['prediction']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'linear_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = prediction), color='green') + geom_jitter(aes(x = dist, y = linear_prediction), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','linear_prediction','linear_error','prediction','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=2))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['linear_prediction'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['linear_prediction'] = round(2*test_dataset['linear_prediction'])/2
test_dataset['prediction'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['prediction'] = round(2*test_dataset['prediction'])/2
test_dataset['linear_error'] = test_dataset['dist'] - test_dataset['linear_prediction']
test_dataset['error'] = test_dataset['dist'] - test_dataset['prediction']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'linear_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = prediction), color='green') + geom_jitter(aes(x = dist, y = linear_prediction), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','linear_prediction','linear_error','prediction','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
knitr::opts_chunk$set(include=TRUE, message=FALSE, warning=FALSE)
knitr::opts_chunk$set(out.width="100%", fig.height = 4.5, split=FALSE, fig.align = 'default')
options(dplyr.summarise.inform = FALSE)
all_ratings <- read.csv("../input/ski-jumping-results-database-2009now/all_ratings.csv")
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['linear_output'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['linear_error'] = test_dataset['dist'] - test_dataset['linear_output']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'linear_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = prediction), color='green') + geom_jitter(aes(x = dist, y = linear_prediction), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','linear_output','linear_error','output','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['linear_output'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['linear_error'] = test_dataset['dist'] - test_dataset['linear_output']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'linear_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = output), color='green') + geom_jitter(aes(x = dist, y = linear_output), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','linear_output','linear_error','output','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['l_output'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['l_error'] = test_dataset['dist'] - test_dataset['linear_output']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'l_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = output), color='green') + geom_jitter(aes(x = dist, y = linear_output), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','l_output','l_error','output','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['l_output'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['l_error'] = test_dataset['dist'] - test_dataset['l_output']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'l_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = output), color='green') + geom_jitter(aes(x = dist, y = linear_output), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','l_output','l_error','output','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
require(tidyverse)
require(knitr)
require(ggplot2)
predict_comp_two <- function(code, dataset, simple_model, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['l_output'] = predict(simple_model,test_dataset)*test_dataset['hill_size_x']
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['l_error'] = test_dataset['dist'] - test_dataset['l_output']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
r_squared_gam = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
r_squared_linear = sum((test_dataset[,'l_error'])^2)/sum((test_dataset[,'dist']-mean(test_dataset[,'dist']))^2)
print(paste(1-r_squared_gam, 1-r_squared_linear))
N = paste('Results from : ', code, ' with linear (red) and GAM model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = dist, y = output), color='green') + geom_jitter(aes(x = dist, y = l_output), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N))
output = test_dataset[,c('name','round','dist','l_output','l_error','output','error')]
return(output)
}
for(code in codes) print(format.data.frame(predict_comp_two(code,dataset,simple_model,model),digits=1))
shift <- function(x, n){
if (length(x)<=n){return(rep(0,length(x)))}
return(c(rep(x[1], n),x[seq(length(x)-n)]))
}
ar_predict <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['output'] = test_dataset['gam_t']
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
test_dataset[name] = shift(test_dataset$epsilon_t,i)
test_dataset['output'] = test_dataset['output']+coeffs[i]*test_dataset[name]
}
test_dataset['error'] = test_dataset['norm_dist'] - test_dataset['prediction']
r_squared_pr = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
r_squared_gam = sum((test_dataset[,'epsilon_t'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
print(paste(1-r_squared_pr, 1-r_squared_gam))
N = paste('Results from : ', code, ' with GAM (red) and AR model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = norm_dist, y = output), color='green') + geom_jitter(aes(x = norm_dist, y = gam_t), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N) + xlim(0.6,1.1) + ylim(0.6,1.1))
test_dataset = test_dataset %>%
mutate(gam_t = round(gam_t * hill_size_x,1),
epsilon_t = round(epsilon_t * hill_size_x,1),
prediction = round(prediction * hill_size_x,1),
error = round(error * hill_size_x,1))
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
output = test_dataset[,c('name','round','dist','gam_t','epsilon_t','output','error')]
return(output)
}
for(code in codes) print(ar_predict(dataset,simple_model,code))
shift <- function(x, n){
if (length(x)<=n){return(rep(0,length(x)))}
return(c(rep(x[1], n),x[seq(length(x)-n)]))
}
ar_predict <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['output'] = test_dataset['gam_t']
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
test_dataset[name] = shift(test_dataset$epsilon_t,i)
test_dataset['output'] = test_dataset['output']+coeffs[i]*test_dataset[name]
}
test_dataset['error'] = test_dataset['norm_dist'] - test_dataset['prediction']
r_squared_pr = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
r_squared_gam = sum((test_dataset[,'epsilon_t'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
print(paste(1-r_squared_pr, 1-r_squared_gam))
N = paste('Results from : ', code, ' with GAM (red) and AR model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = norm_dist, y = output), color='green') + geom_jitter(aes(x = norm_dist, y = gam_t), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N) + xlim(0.6,1.1) + ylim(0.6,1.1))
test_dataset = test_dataset %>%
mutate(gam_t = round(gam_t * hill_size_x,1),
epsilon_t = round(epsilon_t * hill_size_x,1),
prediction = round(output * hill_size_x,1),
error = round(error * hill_size_x,1))
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
output = test_dataset[,c('name','round','dist','gam_t','epsilon_t','output','error')]
return(output)
}
for(code in codes) print(ar_predict(dataset,simple_model,code))
shift <- function(x, n){
if (length(x)<=n){return(rep(0,length(x)))}
return(c(rep(x[1], n),x[seq(length(x)-n)]))
}
ar_predict <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['output'] = test_dataset['gam_t']
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
test_dataset[name] = shift(test_dataset$epsilon_t,i)
test_dataset['output'] = test_dataset['output']+coeffs[i]*test_dataset[name]
}
test_dataset['error'] = test_dataset['norm_dist'] - test_dataset['prediction']
r_squared_pr = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
r_squared_gam = sum((test_dataset[,'epsilon_t'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
print(paste(1-r_squared_pr, 1-r_squared_gam))
N = paste('Results from : ', code, ' with GAM (red) and AR model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = norm_dist, y = output), color='green') + geom_jitter(aes(x = norm_dist, y = gam_t), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N) + xlim(0.6,1.1) + ylim(0.6,1.1))
test_dataset = test_dataset %>%
mutate(gam_t = round(gam_t * hill_size_x,1),
epsilon_t = round(epsilon_t * hill_size_x,1),
output = round(output * hill_size_x,1),
error = round(error * hill_size_x,1))
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
output = test_dataset[,c('name','round','dist','gam_t','epsilon_t','output','error')]
return(output)
}
for(code in codes) print(ar_predict(dataset,simple_model,code))
shift <- function(x, n){
if (length(x)<=n){return(rep(0,length(x)))}
return(c(rep(x[1], n),x[seq(length(x)-n)]))
}
ar_predict <- function(dataset,model,code){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(round,bib)
hill_size = test_dataset['hill_size_x'][1]
test_dataset['norm_dist'] = test_dataset['dist']/hill_size
test_dataset['gam_t'] = predict(model,test_dataset)
test_dataset['output'] = test_dataset['gam_t']
test_dataset['epsilon_t'] = test_dataset['norm_dist'] - test_dataset['gam_t']
coeffs = seq(2/9,0,length.out=9)
for(i in 1:9){
name = paste('epsilon_t',-i, sep='')
test_dataset[name] = shift(test_dataset$epsilon_t,i)
test_dataset['output'] = test_dataset['output']+coeffs[i]*test_dataset[name]
}
test_dataset['error'] = test_dataset['norm_dist'] - test_dataset['output']
r_squared_pr = sum((test_dataset[,'error'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
r_squared_gam = sum((test_dataset[,'epsilon_t'])^2)/sum((test_dataset[,'norm_dist']-mean(test_dataset[,'norm_dist']))^2)
print(paste(1-r_squared_pr, 1-r_squared_gam))
N = paste('Results from : ', code, ' with GAM (red) and AR model (green)')
print(ggplot(test_dataset) + geom_jitter(aes(x = norm_dist, y = output), color='green') + geom_jitter(aes(x = norm_dist, y = gam_t), color='red') + geom_abline(aes(intercept=0,slope=1), color='blue') + labs(title=N) + xlim(0.6,1.1) + ylim(0.6,1.1))
test_dataset = test_dataset %>%
mutate(gam_t = round(gam_t * hill_size_x,1),
epsilon_t = round(epsilon_t * hill_size_x,1),
output = round(output * hill_size_x,1),
error = round(error * hill_size_x,1))
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
output = test_dataset[,c('name','round','dist','gam_t','epsilon_t','output','error')]
return(output)
}
for(code in codes) print(ar_predict(dataset,simple_model,code))
require(tidyverse)
require(knitr)
codes = c('2017JP3817RL','2019JP3192RL','2018JP3068RL')
predict_comp <- function(code, dataset, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
return(test_dataset[,c('name','round','cumm_rating','short_rating','dist','output','error')])
}
for(code in codes) print(format.data.frame(predict_comp(code,dataset,simple_model),digits=1))
require(tidyverse)
require(knitr)
codes = c('2017JP3817RL','2019JP3192RL','2018JP3068RL')
predict_comp <- function(code, dataset, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
names = c('name','round','c_rating','s_rating','dist','output','error')
output_df = data.frame(test_dataset[,c('name','round','cumm_rating','short_rating','dist','output','error')],col.names = names)
return(output_df)
}
for(code in codes) print(format.data.frame(predict_comp(code,dataset,simple_model),digits=1))
require(tidyverse)
require(knitr)
codes = c('2017JP3817RL','2019JP3192RL','2018JP3068RL')
predict_comp <- function(code, dataset, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
names = c('name','round','c_rating','s_rating','dist','output','error')
output_df = data.frame(test_dataset[,c('name','round','cumm_rating','short_rating','dist','output','error')],row.names = names)
return(output_df)
}
for(code in codes) print(format.data.frame(predict_comp(code,dataset,simple_model),digits=1))
?data.frame
require(tidyverse)
require(knitr)
codes = c('2017JP3817RL','2019JP3192RL','2018JP3068RL')
predict_comp <- function(code, dataset, model){
test_dataset = dataset %>% filter(grepl(code, id)) %>% arrange(desc(cumm_rating),round)
test_dataset = merge(test_dataset, all_names,how='left',by.x='codex.x',by.y='codex')
test_dataset['output'] = predict(model,test_dataset)*test_dataset['hill_size_x']
test_dataset['error'] = test_dataset['dist'] - test_dataset['output']
names = c('name','round','c_rating','s_rating','dist','output','error')
output_df = data.frame(test_dataset[,c('name','round','cumm_rating','short_rating','dist','output','error')])
colnames(output_df)=names
return(output_df)
}
for(code in codes) print(format.data.frame(predict_comp(code,dataset,simple_model),digits=1))
