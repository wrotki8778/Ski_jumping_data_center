shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
ui_dist <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"),
checkboxGroupInput('years', label = 'Select years:', choices = seq(2010,2021,by = 1),
selected = 2018),
actionButton("button", "Close app")
),
mainPanel(
plotOutput("den")
)
)
)
server_dist <- function(input, output) {
output$den <- renderPlot({
gate_results  = reactive(subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season %in% input$years & gender == input$gender & speed > 85 & dist > 0))
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results()) +
geom_jitter(aes(x = speed, y = wind, color = dist)) + labs(title=N) + xlim(87.5,97.5) + ylim(-2,2) +
scale_color_gradientn(colours =  rev(rainbow(3)), limits = c(90,145))
})
observeEvent(input$button, stopApp())
}
shinyApp(ui_dist, server_dist)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
stats  = read.csv('all_stats_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
summary(competitions)
summary(results)
summary(stats)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
stats  = read.csv('all_stats_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
summary(competitions)
summary(results)
summary(stats)
counts <- as.data.frame(table(competitions$place,competitions$gender))
counts_raw <- counts[aggregate(Freq ~ Var1,counts, sum)$Freq>50,]
counts <- filter(counts,counts$Var1 %in% counts_raw$Var1)
counts %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
coord_flip() +
scale_fill_discrete(name = "Gender") +
xlab("") +
theme_bw()
countries <- as.data.frame(table(competitions$country,competitions$gender))
countries_raw <- countries[aggregate(Freq ~ Var1,countries, sum)$Freq>50,]
countries <- filter(countries,countries$Var1 %in% countries_raw$Var1)
countries %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
coord_flip() +
scale_fill_discrete(name = "Gender") +
xlab("") +
theme_bw()
competitions['type_str'] = cut(competitions$type, breaks = c(-0.5,0.5,1.5,2.5,3.5,5.5), labels=c('WC', 'COC', 'GP','FC','Other'))
types <- as.data.frame(table(competitions$place,competitions$type_str))
types_raw <- types[aggregate(Freq ~ Var1,types, sum)$Freq>100,]
types <- filter(types,types$Var1 %in% types_raw$Var1)
types %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
scale_fill_discrete(name = "Type") +
coord_flip() +
xlab("") +
theme_bw()
competitions['size'] = cut(competitions$hill_size_x, breaks = c(0,85,120,160,300), labels=c('small', 'normal', 'large','flying hill'))
ggplot(subset(competitions, gender %in% c("Men", "Women"))) +
geom_bar(aes(x = size, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(competitions) +
geom_bar(aes(x = size, color=type_str),fill="white", alpha = 0.6, position="dodge")
length(setdiff(competitions$id,results$id))
ggplot(subset(results, speed > 60 & speed < 120)) +
geom_density(aes(x = speed),fill="white", alpha = 0.6)
ggplot(subset(merge(results[,c('speed','id')],competitions,by='id'), speed > 60 & speed < 120)) +
geom_area(aes(x = speed, color=size),fill="white", alpha = 0.6, stat='bin', position = position_dodge())
ggplot(subset(results, dist>0)) +
geom_density(aes(x = dist),fill="white", alpha = 0.6)
ggplot(subset(merge(results[,c('dist','id')],competitions[,c('id','size')],by='id'), dist>0)) +
geom_area(aes(x = dist, color=size),fill="white", alpha = 0.6, stat='bin', position = position_dodge())
ggplot(subset(merge(results[,c('dist','id')],competitions[,c('id','size')],by='id'), dist>0)) +
geom_density(aes(x = dist, color=size),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
large_hill_data = subset(merge(results[,c('dist','id')],competitions[,c('id','size')],by='id'), dist>0 & size=='large')
summary(large_hill_data$dist)
skewness(large_hill_data$dist)
ggplot(results) +
geom_density(aes(x = note_points),fill="white", alpha = 0.6)
ggplot(results) +
geom_histogram(aes(x = note_1, y=..density..), breaks=seq(0,20,by=0.5))
library(EnvStats)
parameters=ebeta(results$note_1/20)
print(parameters)
ggplot(results) +
geom_histogram(aes(x = note_1/20, y=..density..), breaks=seq(0,1,length.out = 41)) +
stat_function(fun = dbeta, args = list(shape1 = parameters$parameters[1], shape2 = parameters$parameters[2]))
summary(results$wind)
ggplot(results) +
geom_density(aes(x = wind),fill="white", alpha = 0.6)
summary(results$wind_comp)
ggplot(results) +
geom_density(aes(x = wind_comp),fill="white", alpha = 0.6)
summary(competitions)
summary(results)
View(results)
library(tidyverse)
library(e1071)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
stats  = read.csv('all_stats_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
summary(stats)
View(stats)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
stats  = read.csv('all_stats_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
summary(competitions)
counts <- as.data.frame(table(competitions$place,competitions$gender))
counts_raw <- counts[aggregate(Freq ~ Var1,counts, sum)$Freq>50,]
counts <- filter(counts,counts$Var1 %in% counts_raw$Var1)
counts %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
coord_flip() +
scale_fill_discrete(name = "Gender") +
xlab("") +
theme_bw()
countries <- as.data.frame(table(competitions$country,competitions$gender))
countries_raw <- countries[aggregate(Freq ~ Var1,countries, sum)$Freq>50,]
countries <- filter(countries,countries$Var1 %in% countries_raw$Var1)
countries %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
coord_flip() +
scale_fill_discrete(name = "Gender") +
xlab("") +
theme_bw()
competitions['type_str'] = cut(competitions$type, breaks = c(-0.5,0.5,1.5,2.5,3.5,5.5), labels=c('WC', 'COC', 'GP','FC','Other'))
types <- as.data.frame(table(competitions$place,competitions$type_str))
types_raw <- types[aggregate(Freq ~ Var1,types, sum)$Freq>100,]
types <- filter(types,types$Var1 %in% types_raw$Var1)
types %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
scale_fill_discrete(name = "Type") +
coord_flip() +
xlab("") +
theme_bw()
competitions['size'] = cut(competitions$hill_size_x, breaks = c(0,85,120,160,300), labels=c('small', 'normal', 'large','flying hill'))
ggplot(subset(competitions, gender %in% c("Men", "Women"))) +
geom_bar(aes(x = size, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(competitions) +
geom_bar(aes(x = size, color=type_str),fill="white", alpha = 0.6, position="dodge")
summary(stats)
View(stats)
summer_stats = stats %>% filter(snow != NA)
View(stats)
summer_stats = stats %>% filter(stats, snow != NA)
summer_stats = subset(stats, snow != NA)
summer_stats = subset(stats, snow.notna())
summer_stats = subset(stats, snow.isna() == 1)
summer_stats = subset(stats, isna(snow) == 1)
summer_stats = subset(stats, is.na(snow) == 1)
View(summer_stats)
summer_stats = subset(stats, is.na(snow) == 1 & is.na(air) == 0)
winter_stats = subset(stats, is.na(snow) == 0 & is.na(air) == 0)
View(summer_stats)
summer_stats = subset(stats, is.na(snow) == 1 & is.na(air) == 0)
winter_stats = subset(stats, is.na(snow) == 0 & is.na(air) == 0)
ggplot(summer_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6, stat='bin', position = position_dodge())
summer_stats = subset(stats, is.na(snow) == 1 & is.na(air) == 0)
winter_stats = subset(stats, is.na(snow) == 0 & is.na(air) == 0)
ggplot(summer_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)
summer_stats = subset(stats, is.na(snow) == 1 & is.na(air) == 0)
winter_stats = subset(stats, is.na(snow) == 0 & is.na(air) == 0)
ggplot(summer_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)+labs(title='Temperature plot in summer')
ggplot(winter_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(winter_stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')
summer_stats = subset(stats, is.na(snow) == 1 & is.na(air) == 0)
winter_stats = subset(stats, is.na(snow) == 0 & is.na(air) == 0)
ggplot(summer_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)+labs(title='Temperature plot in summer')
ggplot(winter_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(winter_stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,10)
summer_stats = subset(stats, is.na(snow) == 1 & is.na(air) == 0)
winter_stats = subset(stats, is.na(snow) == 0 & is.na(air) == 0)
ggplot(summer_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)+labs(title='Temperature plot in summer')
ggplot(winter_stats) +
geom_density(aes(x = air),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(winter_stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return(2)
else if (is.na(y['snow']) == 1 & is.na(y['air'])==0) return(1)
return(0)
})
View(stats)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return(1)
else if (is.na(y['snow']) == 1 & is.na(y['air'])==0) return(0)
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=summer),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(winter_stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return(1)
else if (is.na(y['snow']) == 1 & is.na(y['air'])==0) return(0)
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, fill=summer),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(winter_stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
View(stats)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return(1)
else if (is.na(y['snow']) == 1 & is.na(y['air'])==0) return(0)
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=as.factor(summer)),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
summary(as.factor(stats$summer))
View(stats)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return(1)
else if (is.na(y['snow']) == 1 & is.na(y['air'])==0) return(-1)
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=as.factor(summer)),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return(1)
else if (is.na(y['snow']) == 0 & is.na(y['air']) == 0) return(0)
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=as.factor(summer)),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return('summer')
else if (is.na(y['snow']) == 0 & is.na(y['air']) == 0) return('winter')
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=as.factor(summer)),fill="white", alpha = 0.6)+labs(title='Temperature plot in winter')
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return('summer')
else if (is.na(y['snow']) == 0 & is.na(y['air']) == 0) return('winter')
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=as.factor(summer)),fill="white", alpha = 0.6)+labs(title='Temperature plot')
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return('summer')
else if (is.na(y['snow']) == 0 & is.na(y['air']) == 0) return('winter')
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color=summer),fill="white", alpha = 0.6)+labs(title='Temperature plot')
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return('summer')
else if (is.na(y['snow']) == 0 & is.na(y['air']) == 0) return('winter')
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color = summer),fill="white", alpha = 0.6)+labs(title='Temperature plot')
ggplot(stats) +
geom_density(aes(x = humid, color = summer),fill="white", alpha = 0.6)+labs(title='Humidity plot')+xlim(0,100)
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
View(stats)
tmp_data = merge(stats,competitions,by = 'id')
?merge
View(competitions)
tmp_data = merge(stats,competitions,by.x = 'fis_code', by.y = 'id')
View(summer_stats)
View(tmp_data)
unique_stats = unique(stats,by='id')
View(unique_stats)
unique_stats = unique(stats,by='fis_code')
View(unique_stats)
unique_stats = unique(stats,by='fis_code')
View(unique_stats)
?unique
unique_stats = stats[!duplicated(stats$fis_code),]
View(unique_stats)
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by = 'id')
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by.x = 'fis_code', by.y = 'id')
ggplot(tmp_data) +
geom_bar(aes(x = all_jumpers, color=gender),fill="white", alpha = 0.6, position="dodge")
View(competitions)
View(competitions)
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by.x = 'fis_code', by.y = 'id')
ggplot(tmp_data) +
geom_bar(aes(x = all_jumpers, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(tmp_data) +
geom_bar(aes(x = all_jumpers, color=type_str),fill="white", alpha = 0.6, position="dodge")
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by.x = 'fis_code', by.y = 'id')
ggplot(tmp_data) +
geom_density(aes(x = all_jumpers, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(tmp_data) +
geom_density(aes(x = all_jumpers, color=type_str),fill="white", alpha = 0.6, position="dodge")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
stats  = read.csv('all_stats_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
summary(competitions)
counts <- as.data.frame(table(competitions$place,competitions$gender))
counts_raw <- counts[aggregate(Freq ~ Var1,counts, sum)$Freq>50,]
counts <- filter(counts,counts$Var1 %in% counts_raw$Var1)
counts %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
coord_flip() +
scale_fill_discrete(name = "Gender") +
xlab("") +
theme_bw()
countries <- as.data.frame(table(competitions$country,competitions$gender))
countries_raw <- countries[aggregate(Freq ~ Var1,countries, sum)$Freq>50,]
countries <- filter(countries,countries$Var1 %in% countries_raw$Var1)
countries %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
coord_flip() +
scale_fill_discrete(name = "Gender") +
xlab("") +
theme_bw()
competitions['type_str'] = cut(competitions$type, breaks = c(-0.5,0.5,1.5,2.5,3.5,5.5), labels=c('WC', 'COC', 'GP','FC','Other'))
types <- as.data.frame(table(competitions$place,competitions$type_str))
types_raw <- types[aggregate(Freq ~ Var1,types, sum)$Freq>100,]
types <- filter(types,types$Var1 %in% types_raw$Var1)
types %>%
mutate(Var1 = fct_reorder(Var1,Freq,sum)) %>%
ggplot(aes(x=Var1, y=Freq, fill=Var2)) +
geom_bar(stat="identity", alpha=.6, width=.4) +
scale_fill_discrete(name = "Type") +
coord_flip() +
xlab("") +
theme_bw()
competitions['size'] = cut(competitions$hill_size_x, breaks = c(0,85,120,160,300), labels=c('small', 'normal', 'large','flying hill'))
ggplot(subset(competitions, gender %in% c("Men", "Women"))) +
geom_bar(aes(x = size, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(competitions) +
geom_bar(aes(x = size, color=type_str),fill="white", alpha = 0.6, position="dodge")
summary(stats)
stats['summer'] = apply(stats[,c('snow','air')], 1, function(y){
if (is.na(y['snow'])==1 & is.na(y['air']) == 0) return('summer')
else if (is.na(y['snow']) == 0 & is.na(y['air']) == 0) return('winter')
return(NA)
})
ggplot(stats) +
geom_density(aes(x = air, color = summer),fill="white", alpha = 0.6)+labs(title='Temperature plot')
ggplot(stats) +
geom_density(aes(x = humid, color = summer),fill="white", alpha = 0.6)+labs(title='Humidity plot')+xlim(0,100)
ggplot(stats) +
geom_density(aes(x = snow),fill="white", alpha = 0.6)+labs(title='Snow temperature plot in winter')+xlim(-25,5)
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by.x = 'fis_code', by.y = 'id')
tmp_data['jumpers']= cut(tmp_data$all_jumpers, breaks = c(0,30,40,50,60,70,110))
ggplot(tmp_data) +
geom_density(aes(x = all_jumpers, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(tmp_data) +
geom_density(aes(x = all_jumpers, color=type_str),fill="white", alpha = 0.6, position="dodge")
View(tmp_data)
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by.x = 'fis_code', by.y = 'id')
tmp_data['jumpers']= cut(tmp_data$all_jumpers, breaks = c(0,30,40,50,60,70,110))
ggplot(tmp_data) +
geom_bar(aes(x = jumpers, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(tmp_data) +
geom_bar(aes(x = jumpers, color=type_str),fill="white", alpha = 0.6, position="dodge")
unique_stats = stats[!duplicated(stats$fis_code),]
tmp_data = merge(unique_stats,competitions,by.x = 'fis_code', by.y = 'id')
tmp_data['jumpers']= cut(tmp_data$all_jumpers, breaks = c(0,35,45,55,65,75,110))
ggplot(tmp_data) +
geom_bar(aes(x = jumpers, color=gender),fill="white", alpha = 0.6, position="dodge")
ggplot(tmp_data) +
geom_bar(aes(x = jumpers, color=type_str),fill="white", alpha = 0.6, position="dodge")
View(competitions)
