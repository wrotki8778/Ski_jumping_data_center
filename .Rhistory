})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6,span = 0.3, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6,span = 0.9, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat='bin',method = lm, formula = y ~ splines::bs(x, 3))+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_smooth(aes(x = speed, color = gender),fill="white", alpha = 0.6, stat='bin')+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87,98)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
View(actual_results)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by=1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = input$year, labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by=1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = input$year, labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(0,input$year), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(input$year), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
cut(competition$season, breaks = c(2018), labels=c('before', 'after'))
cut(competitions$season, breaks = c(2018), labels=c('before', 'after'))
cut(competitions$season, breaks = c(0,2018), labels=c('before', 'after'))
cut(competitions$season, breaks = c(2009,2018,2021), labels=c('before', 'after'))
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','before')],by='id')) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
cut(c(2018,2019,2017,2020), breaks = c(2009,2018,2022), labels=c('before', 'after'))
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
library(shiny)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
obe_ids = subset(competitions, place == 'Oberstdorf' & hill_size_x == 137)
actual_results <- subset(results, results$id %in% obe_ids$id)
summary(actual_results)
summary(obe_ids)
plot(actual_results[,c(1,2,9,11,13,15)])
round(cor(actual_results[,c(1,2,9,11,13,15)],use = 'complete.obs'),2)
ggplot(subset(actual_results[,c('dist','id')], dist>0)) +
geom_density(aes(x = dist),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','id')], speed>85)) +
geom_density(aes(x = speed),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','dist')], speed>85 & dist>0)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution')
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & id %in% obe_men)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for men') + xlim(87,100) + ylim(80,140)
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & !(id %in% obe_men))) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for women') + xlim(87,100) + ylim(80,140)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('before', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
View(obe_ids)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('to', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
View(obe_ids)
View(actual_results)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('to', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_histogram(aes(x = speed, color = before),fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','gender')],by='id'), gate == input$gate & speed > 85)
N_1 = nrow(subset(gate_results, gender=='Women'))
N = paste('Women jumps count: ', N_1, ', Men jumps count: ', nrow(gate_results) - N_1)
ggplot(merge(gate_results[,c('speed','id')],competitions[,c('id','gender')],by='id')) +
geom_histogram(aes(x = speed, color = gender),fill="white", alpha = 0.6)+labs(title=N) + xlim(87.5,97.5)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gate", label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id','gate')],competitions[,c('id','season')],by='id'), gate == input$gate & speed > 85)
gate_results['before'] = cut(gate_results$season, breaks = c(2009,input$year,2022), labels=c('to', 'after'))
N = paste('Before and after: ', input$year)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z= wind),fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,140)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = sort(unique(actual_results$gender)), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z = wind), fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = sort(unique(actual_results$gender)), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z = wind), fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = sort(unique(actual_results$gender)), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z = wind), fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(actual_results$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z = wind), fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z = wind), fill="white", alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, z = wind), alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
shinyApp(ui, server)
ui <- basicPage(
selectInput("gender", label = 'Select gender:',
choices = unique(competitions$gender), selected = "Men"
),
selectInput("year", label = 'Select a limit year:',
choices = seq(2010,2021,by = 1), selected = 2018
),
plotOutput("den")
)
server <- function(input, output) {
output$den <- renderPlot({
gate_results  = subset(merge(actual_results[,c('speed','id', 'gate', 'wind', 'dist')],
competitions[,c('id', 'season', 'gender')],by = 'id'),
season == input$year & gender == input$gender & speed > 85 & dist > 0)
N = paste('Results from : ', input$year, ' Gender:', input$gender)
ggplot(gate_results) +
geom_raster(aes(x = speed, y = dist, fill = wind), alpha = 0.6) + labs(title=N) + xlim(87.5,97.5) + ylim(90,145)
})
}
shinyApp(ui, server)
