if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 6), rep('spol', 20))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
karty = c(rep('sam', 5), rep('spol', 21))
sukces_sp = 0
sukces_sam = 0
sukces_oba = 0
N = 10000
for (i in 1:N) {
tmp = sample(karty, 8)
warunek_2 = c(tmp[1] == 'spol', tmp[2] == 'spol', tmp[3]=='spol')
warunek_3 = c(length(tmp[tmp == 'sam']) > 1)
if (prod(warunek_2)){sukces_sp = sukces_sp+1}
if (prod(warunek_3)){sukces_sam = sukces_sam+1}
if (prod(warunek_3)*prod(warunek_2)){sukces_oba = sukces_oba+1}
}
sukces_oba/sukces_sam
x=seq(1,10,by=1)
y=x
niep=0
dwuc=0
niep_dwuc=0
for(i in x){
for(j in y){
if((i*j)%%2 == 1){
niep = niep+1
}
if(i*j>9){dwuc = dwuc+1}
if(i*j>9 & (i*j)%%2 == 1){niep_dwuc = niep_dwuc+1}
}
}
x=seq(0,9,by=1)
y=x
niep=0
dwuc=0
niep_dwuc=0
for(i in x){
for(j in y){
print(i*j)
if((i*j)%%2 == 1){
niep = niep+1
}
if(i*j>9){dwuc = dwuc+1}
if(i*j>9 & (i*j)%%2 == 1){niep_dwuc = niep_dwuc+1}
}
}
krotka = seq(1,50, by=1)
N=10000
probka = rep(0,N)
for(i in 1:N){
u = sample(krotka,5)
probka[i] = min(u)
}
hist(probka)
mean(probka)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read_csv("all_results.csv",
col_types = cols(wind = col_double(),
wind_comp = col_double(), gate = col_double(),
gate_points = col_double()))
dataset <- merge(all_results,all_ratings,by=c('round','id','codex'),all.y=FALSE)
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv",
col_types = cols(wind = col_double(),
wind_comp = col_double(), gate = col_double(),
gate_points = col_double()))
all_results <- read.csv("all_results.csv")
View(all_results)
dataset <- merge(all_results,all_ratings,by=c('round','id','codex'),all.y=FALSE)
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset$gender = as.integer(as.factor(dataset$gender))
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender, data=dataset)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+s(wind)+s(hill_size_x)+s(cumm_rating)+gender, data=dataset)
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date, data=dataset)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+s(wind)+s(hill_size_x)+s(cumm_rating)+gender+s(date), data=dataset)
summary(simple_model)
dataset$date_new = as.date(dataset$date)
dataset$date_new = as.Date.character(dataset$date)
View(dataset)
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new, data=dataset)
summary(simple_model)
model<-gam(norm_dist~s(speed)+s(wind)+s(hill_size_x)+s(cumm_rating)+gender+s(date_new), data=dataset)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+s(wind)+s(hill_size_x)+s(cumm_rating)+gender+s(date_new), data=dataset)
summary(dataset$data_new)
summary(dataset)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(all_results,all_ratings,by=c('round','id','codex'),all.y=FALSE)
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset$gender = as.integer(as.factor(dataset$gender))
dataset$date_new = as.integer(as.Date.character(dataset$date))
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new, data=dataset)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+s(wind)+s(hill_size_x)+s(cumm_rating)+gender+s(date_new), data=dataset)
plot(model)
summary(model)
View(dataset)
plot_smooths(
model = model,
series = date_new
)
library(tidymv)
plot_smooths(
model = model,
series = date_new
)
install.packages("tidymv")
library(tidymv)
plot_smooths(
model = model,
series = date_new
)
plot_smooths(
model = model,
series = cumm_rating
)
?plot_smooths
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(all_results,all_ratings,by=c('round','id','codex'),all.y=FALSE,all.x=TRUE)
View(dataset)
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
View(all_comps_r)
View(all_ratings)
?unique
View(all_ratings)
short_ratings<- all_ratings
short_ratings['short_id'] <- substr(short_ratings['id'],10)
View(short_ratings)
View(all_ratings)
?substr
short_ratings['short_id'] <- substr(short_ratings['id'],1,10)
View(short_ratings)
?apply
short_ratings<- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], substr ,start=1, end=10)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(all_results,all_ratings,by=c('round','id','codex'),all.y=FALSE,all.x=TRUE)
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
short_ratings<- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, end=10)
short_ratings<- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
View(short_ratings)
short_ratings <- short_ratings[unique(short_ratings['short_id','codex']),]
View(short_ratings)
?unique
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')])]
short_ratings<- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')])]
View(short_ratings)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),]
View(short_ratings)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(all_results,all_ratings,by=c('round','id','codex'),all.y=FALSE,all.x=TRUE)
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings<- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),]
View(dataset)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings <- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),]
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(all_results,short_ratings,by=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
dataset <- merge(dataset,short_ratings,by=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
View(dataset)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings <- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),]
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,short_ratings,by=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
View(dataset)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(dataset,all_comps_r,by=c('id'),all.y=FALSE)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(all_results,all_comps_r,by=c('id'),all.y=FALSE)
View(dataset)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings <- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),]
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,short_ratings,by=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
dataset <- merge(dataset,short_ratings,by.x=c('short_id','codex.x'),by.y=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
View(dataset)
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
dataset <- merge(all_results,all_comps_r,by=c('id'),all.y=FALSE)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings <- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),c('short_id','codex','cumm_rating')]
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,short_ratings,by.x=c('short_id','codex.x'),by.y=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
dataset$gender = as.integer(as.factor(dataset$gender))
dataset$date_new = as.integer(as.Date.character(dataset$date))
View(dataset)
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new, data=dataset)
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new+training, data=dataset)
summary(simple_model)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+s(wind)+s(hill_size_x)+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
-0.02*140
plot(model)
-0.05*140
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new+training, data=dataset)
summary(simple_model)
library(mgcv) # contains our prime model
model<-gam(norm_dist~speed+wind+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
0.02*140
0.005*140
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+wind+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
plot(model)
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
all_results <- all_results[all_results['speed']>50,]
setwd("~/GitHub/Ski_jumping_data_center")
all_ratings <- read.csv("all_ratings.csv")
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
all_results <- all_results[all_results['speed']>50,]
all_results <- all_results[all_results['dist']>40,]
dataset <- merge(all_results,all_comps_r,by=c('id'),all.y=FALSE)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings <- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),c('short_id','codex','cumm_rating')]
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,short_ratings,by.x=c('short_id','codex.x'),by.y=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
dataset$gender = as.integer(as.factor(dataset$gender))
dataset$date_new = as.integer(as.Date.character(dataset$date))
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new+training, data=dataset)
summary(simple_model)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+wind+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
plot(model)
all_comps_r <- read.csv("all_comps_r.csv")
all_results <- read.csv("all_results.csv")
all_results <- all_results[all_results['speed']>50 & all_results['speed']<115,]
all_results <- all_results[all_results['dist']>40,]
dataset <- merge(all_results,all_comps_r,by=c('id'),all.y=FALSE)
dataset['short_id'] <- apply(dataset['id'], 2, substr ,start=1, stop=10)
short_ratings <- all_ratings
short_ratings['short_id'] <- apply(short_ratings['id'], 2, substr ,start=1, stop=10)
short_ratings <- short_ratings[!duplicated(short_ratings[,c('short_id','codex')]),c('short_id','codex','cumm_rating')]
dataset['norm_dist'] = dataset['dist']/dataset['hill_size_x']
dataset <- merge(dataset,short_ratings,by.x=c('short_id','codex.x'),by.y=c('short_id','codex'),all.y=FALSE,all.x=TRUE)
dataset$gender = as.integer(as.factor(dataset$gender))
dataset$date_new = as.integer(as.Date.character(dataset$date))
simple_model <- lm(norm_dist~speed+wind+hill_size_x+cumm_rating+gender+date_new+training, data=dataset)
summary(simple_model)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+wind+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
plot(model)
model<-gam(norm_dist~speed+wind+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
library(mgcv) # contains our prime model
model<-gam(norm_dist~s(speed)+s(wind)+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
model<-gam(norm_dist~s(speed)+wind+hill_size_x+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
library(mgcv) # contains our prime model
model<-gam(norm_dist~te(speed,hill_size_x, bs='gp')+wind+s(cumm_rating)+gender+training+s(date_new), data=dataset)
summary(model)
plot(model)
