knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
install.packages("rlang")
library(tidyverse)
install.packages(c("broom", "cachem", "data.table", "glmnet", "htmltools", "imager", "pillar", "pkgload", "vctrs", "xfun"))
install.packages(c("broom", "cachem", "data.table", "glmnet", "htmltools", "imager", "pillar", "pkgload", "vctrs", "xfun"))
install.packages(c("broom", "cachem", "data.table", "glmnet", "htmltools", "imager", "pillar", "pkgload", "vctrs", "xfun"))
install.packages(c("broom", "cachem", "data.table", "glmnet", "htmltools", "imager", "pillar", "pkgload", "vctrs", "xfun"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(tidyverse)
library(e1071)
library(shiny)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
library(shiny)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
obe_ids = subset(competitions, place == 'Oberstdorf' & hill_size_x == 137)
actual_results <- subset(results, results$id %in% obe_ids$id)
summary(actual_results)
summary(obe_ids)
plot(actual_results[,c(1,2,9,11,13,15)])
round(cor(actual_results[,c(1,2,9,11,13,15)],use = 'complete.obs'),2)
ggplot(subset(actual_results[,c('dist','id')], dist>0)) +
geom_density(aes(x = dist),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','id')], speed>85)) +
geom_density(aes(x = speed),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','dist')], speed>85 & dist>0)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution')
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & id %in% obe_men)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for men') + xlim(87,100) + ylim(80,140)
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & !(id %in% obe_men))) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for women') + xlim(87,100) + ylim(80,140)
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
renderPlot({
gate_results  = subset(actual_results, gate == select_gate)
hist(
gate_results$dist,
col = 'gray', border = 'white',
xlab = 'Duration (minutes)', main = ''
)
})
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
renderPlot({
gate_results  = subset(actual_results, gate == select_gate)
hist(
gate_results$dist,
col = 'gray', border = 'white',
xlab = 'Duration (minutes)', main = ''
)
})
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
ui <- renderPlot({
gate_results  = subset(actual_results, gate == select_gate)
hist(
gate_results$dist,
col = 'gray', border = 'white',
xlab = 'Duration (minutes)', main = ''
)
})
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
gate_results  = subset(actual_results, gate == select_gate)
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
ui <- renderPlot({
gate_results  = subset(actual_results, gate == select_gate)
hist(
gate_results$dist,
col = 'gray', border = 'white',
xlab = 'Duration (minutes)', main = ''
)
})
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
ui <- renderPlot({
gate_results  = subset(actual_results, gate == input$select_gate)
hist(
gate_results$dist,
col = 'gray', border = 'white',
xlab = 'Duration (minutes)', main = ''
)
})
unlink('~/GitHub/Ski_jumping_data_center/oberstdorf_markdown_cache', recursive = TRUE)
knit_with_parameters('~/GitHub/Ski_jumping_data_center/oberstdorf_markdown.Rmd')
unlink('~/GitHub/Ski_jumping_data_center/oberstdorf_markdown_cache', recursive = TRUE)
knit_with_parameters('~/GitHub/Ski_jumping_data_center/oberstdorf_markdown.Rmd')
knit_with_parameters('~/GitHub/Ski_jumping_data_center/oberstdorf_markdown.Rmd')
rmarkdown::render("MyDocument.Rmd", params = "ask")
rmarkdown::render("oberstdorf_markdown.Rmd", params = "ask")
setwd("~/GitHub/Ski_jumping_data_center")
rmarkdown::render("oberstdorf_markdown.Rmd", params = "ask")
knit_with_parameters('~/GitHub/Ski_jumping_data_center/oberstdorf_markdown.Rmd')
unlink('oberstdorf_markdown_cache', recursive = TRUE)
setwd("~/GitHub/Ski_jumping_data_center")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(e1071)
library(shiny)
competitions = read.csv('all_comps_r.csv',sep=',',dec='.',stringsAsFactors = TRUE)
results = read.csv('all_results.csv',sep=',',dec='.')
names = read.csv('all_names.csv',sep=',',dec='.',stringsAsFactors = TRUE)
obe_ids = subset(competitions, place == 'Oberstdorf' & hill_size_x == 137)
actual_results <- subset(results, results$id %in% obe_ids$id)
summary(actual_results)
summary(obe_ids)
plot(actual_results[,c(1,2,9,11,13,15)])
round(cor(actual_results[,c(1,2,9,11,13,15)],use = 'complete.obs'),2)
ggplot(subset(actual_results[,c('dist','id')], dist>0)) +
geom_density(aes(x = dist),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','id')], speed>85)) +
geom_density(aes(x = speed),fill="white", alpha = 0.6)+labs(title='Normalized plots of conditional densities')
ggplot(subset(actual_results[,c('speed','dist')], speed>85 & dist>0)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution')
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & id %in% obe_men)) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for men') + xlim(87,100) + ylim(80,140)
obe_men = subset(obe_ids, gender=='Men')$id
ggplot(subset(actual_results[,c('speed','dist','id')], speed>85 & dist>0 & !(id %in% obe_men))) +
geom_density_2d_filled(aes(x = speed, y= dist))+labs(title='Normalized bivariate distribution for women') + xlim(87,100) + ylim(80,140)
selectInput(
'select_gate', label = 'Select gate:',
choices = sort(unique(actual_results$gate)), selected = 15
)
ui <- renderPlot({
gate_results  = subset(actual_results, gate == input$select_gate)
hist(
gate_results$dist,
col = 'gray', border = 'white',
xlab = 'Duration (minutes)', main = ''
)
})
